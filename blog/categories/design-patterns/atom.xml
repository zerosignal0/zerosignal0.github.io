<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: design patterns | The blergh]]></title>
  <link href="http://zerosignal0.github.io/blog/categories/design-patterns/atom.xml" rel="self"/>
  <link href="http://zerosignal0.github.io/"/>
  <updated>2014-11-18T07:09:31+00:00</updated>
  <id>http://zerosignal0.github.io/</id>
  <author>
    <name><![CDATA[Gary Wright]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python: Intro to decorators]]></title>
    <link href="http://zerosignal0.github.io/blog/2014/06/10/python-intro-to-decorators/"/>
    <updated>2014-06-10T04:07:14+00:00</updated>
    <id>http://zerosignal0.github.io/blog/2014/06/10/python-intro-to-decorators</id>
    <content type="html"><![CDATA[<p><b>Do you even decorate, bro? – Intro to decorators</b></p>

<p>When looking at the Python programming language, some of the most powerful and, unfortunately very under utilized &ldquo;macro&rdquo; design pattern within the language.  One of the reasons I believe this to be the case is that most explanations of decorators suck.  When you read the word &ldquo;decorator&rdquo; in regards to application development, most people generally think of <a href="http://www.amazon.com/gp/product/0201633612/ref=ase_bruceeckelA/">http://www.amazon.com/gp/product/0201633612/ref=ase_bruceeckelA/</a> .  While the “decorator” in Python can indeed be implemented in this fashion of design pattern, it is a very limited version of what decorators can actually accomplish.</p>

<p>I believe that decorators can actually be thought of as more “macros”, than the classical design pattern aforementioned above.  <a href="http://en.wikipedia.org/wiki/Macro_">http://en.wikipedia.org/wiki/Macro_</a>(computer_science) , as defined by Wikipedia is “a rule or pattern that specifies how a certain input sequence (often a sequence of characters) should be mapped to a replacement output sequence (also often a sequence of characters) according to a defined procedure.”  In short, if you have some metadata that you want to apply to any class, function or object, dress it up with a decorator.</p>

<p><b>Enough already, get to the example!</b></p>

<p>Decorators allow you to inject or modify code in functions or classes. Sounds a bit like Aspect-Oriented Programming (AOP) in Java, doesn&rsquo;t it? So lets say you have an action that you would like to perform at the entry point (execution) or exit point (return) of a class, function.  This is a prime example as when to use a decorator.</p>

<p>```python decorator example.py</p>

<p>@myDecorator
def myFunction1():</p>

<pre><code> print (‘hello from inside myFunction1()’)
</code></pre>

<p>```</p>

<p>note the</p>

<p>```python myscript</p>

<p>@myDecorator # The @myDecorator denotes the the application of a decorator</p>

<p>```</p>

<p><b>Function decorators</b></p>

<p>So by affixing a @decoratorname on a line directly above a function (or object), denotes the application of the results of a decorator function. In the previous example, when the python parser passes over the “myFunction()”, “myFunction()” is compiled and is, in turn, passed to the “myDecorator code block.  This code block creates a function-like object that is ultimately what is returned when calling the “myFunction()” function.  Confusing?  Maybe this example will help.</p>

<p>```python decorator_example2.py</p>

<p>class myDecorator(object):</p>

<pre><code>def __init__(self, func_object):
    print ("Hello from inside myDecorator.__init__()")
    func_object() # Execute func_object() to prove it has been executed.
def __call__(self):
    print ("Hello from inside myDecorator.__call__()")
</code></pre>

<p>@myDecorator
def myFunction():</p>

<pre><code>print ("Hello from inside myFunction()")
</code></pre>

<p>print (&ldquo;Finished decorating myFunction()&rdquo;)
myFunction()</p>

<p>```</p>

<p>When you execute the above code, your results will look something like this:</p>

<p>```text output</p>

<p>Hello from inside myDecorator.<strong>init</strong>()
Hello from inside myFunction()
Finished decorating myFunction()
Hello from inside myDecorator.<strong>call</strong>()</p>

<p>```</p>

<p>Note that the initialization of myDecorator(object) is executed when myFunction() is called. Due to the fact that we call “func_object()”, which is just myFunction() passed into the decorator class.<strong>init</strong> as a function object labeled “func_object”.  Generally, you&rsquo;ll pass the function object in the constructor and later use it in the <strong>call</strong>() method.</p>

<p>When myFunction() is called after it has been decorated, we get completely different behavior; the myDecorator.<strong>call</strong>() method is called instead of the original code. This is due to the fact that decoration replaces the original function object with the result of the decoration. In our case, the myDecorator object replaces myFunction.</p>

<p>This is it for the introduction to Python decorators, however look out for part II, coming soon… ☺</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python: Recursion, part duex]]></title>
    <link href="http://zerosignal0.github.io/blog/2014/06/04/python-recursion/"/>
    <updated>2014-06-04T03:09:08+00:00</updated>
    <id>http://zerosignal0.github.io/blog/2014/06/04/python-recursion</id>
    <content type="html"><![CDATA[<p>I ended up on a roll tonight writing my documentation on python recursive functions and decided to continue writing the second portion of this blog entry <a href="http://zerosignal0.github.io/blog/2014/06/03/python-introduction-to-recursion/">,first post found here</a>.  In this post I plan to provide you with a slightly more complicated example of a recursive function while also showing a side-by-side comparison of recursion vs. iteration (Spoiler alert, iteration wins!).</p>

<br><br>


<p><b>Italians and integers, breeding like rabbits!</b></p>

<br><br>


<p>My example algorithm that I am introducing for advanced recursive method usage is none other than the <a href=”http://en.wikipedia.org/wiki/Fibonacci_number”>Fibonacci number</a>.</p>

<br>


<p>The Fibonacci numbers are a sequence of the following integer values:</p>

<br>


<p><b>[0,1,1,2,3,5,8,13,21,34,55,89,144 &hellip;]</b></p>

<br>


<p>The Fibonacci numbers are defined by the equation:
```text equation</p>

<p>Fn = Fn-1 + Fn-2
with F0 = 0 and F1 = 1</p>

<p>```</p>

<br><br>


<p>The Fibonacci sequence(numbers) are named after the mathematician Leonardo of Pisa, who is better known as Fibonacci. In his book &ldquo;Liber Abaci&rdquo; (published 1202) he introduced the sequence as an exercise dealing with (biologically unrealistic) rabbit breeding habits. His sequence of the Fibonacci numbers begins with F1 = 1, while in modern mathematics the sequence starts with F0 = 0. But this has no effect on the other members of the sequence.</p>

<br><br>


<p>OK, now that you are familiar with the introduction of Fionacci numbers lets get to the gooey, nerdy center of this example! ☺</p>

<br><br><br>


<p><b>Solving for Fibonacci sequencing in Python</b></p>

<br><br>


<p>The Fibonacci numbers are the result of an artificial rabbit population, satisfying the following conditions: <br><br></p>

<p>A newly born pair of rabbits, one male, one female, build the initial population.
The rabbits are able to successfully mate at the age of one month. This means that at the end of the second month of life, the female rabbit gives birth to 2 “hoppy”(harhar), healthy rabbits.  The new sibling pair of rabbits consist of 1 male and one female.  Did I mention that all of the rabbit spawn are immortal?!? Every rabbit from here on out will never die and just keep producing offspring. What a job, eh? Every new pair of male|female rabbits will continue to mate after the second month of life until infinity.  The Fibonacci numbers are the numbers of rabbit pairs after n months, i.e. after 10 months we will have F10 rabbits. <br><br></p>

<p>The Fibonacci equation is very easy to program, as your equation depicted within the code is almost 1:1 with the original equation:</p>

<br><br>


<p>```python Fibonacci recursive example</p>

<p>def fibonacci_recursive(n):</p>

<pre><code>if n == 0:
    return 0
elif n == 1:
    return 1
else:
    return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)
</code></pre>

<p>```</p>

<br><br>


<p>The above example depicts the Fibonacci numbers solution by using recursive methods.  Now I will provide an example of a python function that returns the same Fibonacci numbers only using iteration instead of recursion.</p>

<br><br>


<p>```python Finbonacci iterative example</p>

<p>def fibonacci_iterative(n):</p>

<pre><code>a, b = 0, 1
for i in range(n):
    a, b = b, a + b
return a
</code></pre>

<p>```</p>

<br><br>


<p>If you try both of these functions in your python interpreter you will notice that fibonacci_iterative method is “Orders of magnitude” faster than the fibonacci_recursive equivalent.</p>

<br><br><br>


<p><b>Why is recursion so slow?!</b></p>

<br><br>


<p>In Java, C, and Python, recursion is fairly expensive compared to iteration (in general) because it requires the allocation of a new stack frame. In some C compilers, one can use a compiler flag to eliminate this overhead, which transforms certain types of recursion (actually, certain types of tail calls) into jumps instead of function calls.</p>

<p>In functional programming language implementations, sometimes, iteration can be very expensive and recursion can be very cheap. In many, recursion is transformed into a simple jump, but changing the loop variable (which is mutable) sometimes requires some relatively heavy operations, especially on implementations, which support multiple threads of execution. Mutation is expensive in some of these environments because of the interaction between the mutator and the garbage collector, if both might be running at the same time.</p>

<p>There are practical ways that we can help along recursive functions in order to speed them up however.  Lets move onto the race between recursion vs. iteration and then we can describe how to speed up our recursion functions in this example.</p>

<br><br><br>


<p><b>The great race</b></p>

<br><br>


<p>In the example below we are going to place both of our above Fibonacci functions into an importable python file.  Then we are going to write a new script that imports / executes both functions while performing timing calculations comparing the execution times.</p>

<br><br>


<p>```python import_me.py</p>

<p>def fibonacci_iterative(n):</p>

<pre><code>a, b = 0, 1
for i in range(n):
    a, b = b, a + b
return a
</code></pre>

<p>def fibonacci_recursive(n):</p>

<pre><code>if n == 0:
    return 0
elif n == 1:
    return 1
else:
    return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)
</code></pre>

<p>```</p>

<br><br>


<p>Now we will write a python script that will allow for us to import and execute the two functions within “import_me.py” and measure the execution times.</p>

<br><br><br>


<p>```python lets_race.py</p>

<p>from timeit import Timer
from import_me import fibonacci_recursive</p>

<p>t1 = Timer(&ldquo;fibonacci_recursive(10)&rdquo;,&ldquo;from import_me import fibonacci_recursive&rdquo;)</p>

<p>for i in range(1,41):</p>

<pre><code>#Import, execute and time recursive function.
s = ("fibonacci_recursive(" + str(i) + ")")
t1 = Timer(s,"from import_me import fibonacci_recursive")
time1 = t1.timeit(3)

#Import, execute and time iterative function. 
s = ("fibonacci_iterative(" + str(i) + ")")
t2 = Timer(s,"from import_me import fibonacci_iterative")
time2 = t2.timeit(3)

print("n=%2d, recursive exec time: %8.6f, iterative exec time:  %7.6f, iterative percent faster: %10.2f" % (i, time1, time2, time1/time2))
</code></pre>

<p>```</p>

<br><br>


<p><code>text output
n= 1, recursive exec time: 0.000005, iterative exec time:  0.000007, iterative percent faster:       0.72
n= 2, recursive exec time: 0.000007, iterative exec time:  0.000007, iterative percent faster:       1.00
n= 3, recursive exec time: 0.000008, iterative exec time:  0.000007, iterative percent faster:       1.14
n= 4, recursive exec time: 0.000011, iterative exec time:  0.000008, iterative percent faster:       1.35
n= 5, recursive exec time: 0.000017, iterative exec time:  0.000008, iterative percent faster:       2.09
n= 6, recursive exec time: 0.000026, iterative exec time:  0.000008, iterative percent faster:       3.21
n= 7, recursive exec time: 0.006997, iterative exec time:  0.000016, iterative percent faster:     438.01
n= 8, recursive exec time: 0.000060, iterative exec time:  0.000009, iterative percent faster:       6.63
n= 9, recursive exec time: 0.000093, iterative exec time:  0.000010, iterative percent faster:       9.29
n=10, recursive exec time: 0.000148, iterative exec time:  0.000010, iterative percent faster:      14.79
n=11, recursive exec time: 0.000236, iterative exec time:  0.000010, iterative percent faster:      23.57
n=12, recursive exec time: 0.000381, iterative exec time:  0.000010, iterative percent faster:      38.05
n=13, recursive exec time: 0.007792, iterative exec time:  0.000012, iterative percent faster:     653.64
n=14, recursive exec time: 0.001105, iterative exec time:  0.000012, iterative percent faster:      92.70
n=15, recursive exec time: 0.008806, iterative exec time:  0.000012, iterative percent faster:     724.22
n=16, recursive exec time: 0.010133, iterative exec time:  0.000017, iterative percent faster:     598.61
n=17, recursive exec time: 0.019284, iterative exec time:  0.000018, iterative percent faster:    1064.25
n=18, recursive exec time: 0.022575, iterative exec time:  0.000017, iterative percent faster:    1333.61
n=19, recursive exec time: 0.056988, iterative exec time:  0.000020, iterative percent faster:    2845.54
n=20, recursive exec time: 0.079930, iterative exec time:  0.000019, iterative percent faster:    4243.67
n=21, recursive exec time: 0.114535, iterative exec time:  0.000018, iterative percent faster:    6405.25
n=22, recursive exec time: 0.157802, iterative exec time:  0.000018, iterative percent faster:    8708.80
n=23, recursive exec time: 0.261647, iterative exec time:  0.000018, iterative percent faster:   14439.83
n=24, recursive exec time: 0.425641, iterative exec time:  0.000018, iterative percent faster:   23803.57
n=25, recursive exec time: 0.685106, iterative exec time:  0.000019, iterative percent faster:   35919.29
n=26, recursive exec time: 1.090093, iterative exec time:  0.000018, iterative percent faster:   60962.41
n=27, recursive exec time: 1.777188, iterative exec time:  0.000019, iterative percent faster:   93175.84
n=28, recursive exec time: 2.874248, iterative exec time:  0.000020, iterative percent faster:  143517.50
</code></p>

<br><br><br>


<p>In part three of this blog series I will cover in greater detail why the recursive solution is slower than the iterative solution.  I will also cover some tips / tricks that we can do to help tune the recursive function in order to make it perform much like its iterative counterpart.</p>

<p>-g</p>
]]></content>
  </entry>
  
</feed>
