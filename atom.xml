<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The blergh]]></title>
  <link href="http://zerosignal0.github.io/atom.xml" rel="self"/>
  <link href="http://zerosignal0.github.io/"/>
  <updated>2014-06-10T05:08:58+00:00</updated>
  <id>http://zerosignal0.github.io/</id>
  <author>
    <name><![CDATA[Gary Wright]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python: Intro to Decorators]]></title>
    <link href="http://zerosignal0.github.io/blog/2014/06/10/python-intro-to-decorators/"/>
    <updated>2014-06-10T04:07:14+00:00</updated>
    <id>http://zerosignal0.github.io/blog/2014/06/10/python-intro-to-decorators</id>
    <content type="html"><![CDATA[<p><b>Do you even decorate, bro? – Intro to decorators</b>
When looking at the Python programming language, some of the most powerful and, unfortunately very under utilized &ldquo;macro&rdquo; design pattern within the language.  One of the reasons I believe this to be the case is that most explanations of decorators suck.  When you read the word &ldquo;decorator&rdquo; in regards to application development, most people generally think of <a href="http://www.amazon.com/gp/product/0201633612/ref=ase_bruceeckelA/">http://www.amazon.com/gp/product/0201633612/ref=ase_bruceeckelA/</a> .  While the “decorator” in Python can indeed be implemented in this fashion of design pattern, it is a very limited version of what decorators can actually accomplish.</p>

<p>I believe that decorators can actually be thought of as more “macros”, than the classical design pattern aforementioned above.  <a href="http://en.wikipedia.org/wiki/Macro_">http://en.wikipedia.org/wiki/Macro_</a>(computer_science) , as defined by Wikipedia is “a rule or pattern that specifies how a certain input sequence (often a sequence of characters) should be mapped to a replacement output sequence (also often a sequence of characters) according to a defined procedure.”  In short, if you have some metadata that you want to apply to any class, function or object, dress it up with a decorator.</p>

<p><b>Enough already, get to the example!</b>
Decorators allow you to inject or modify code in functions or classes. Sounds a bit like Aspect-Oriented Programming (AOP) in Java, doesn&rsquo;t it? So lets say you have an action that you would like to perform at the entry point (execution) or exit point (return) of a class, function.  This is a prime example as when to use a decorator.</p>

<figure class='code'><figcaption><span>decorator example.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@myDecorator</span>
</span><span class='line'><span class="k">def</span> <span class="nf">myFunction1</span><span class="p">():</span>
</span><span class='line'>     <span class="k">print</span> <span class="p">(</span><span class="err">‘</span><span class="n">hello</span> <span class="kn">from</span> <span class="nn">inside</span> <span class="nn">myFunction1</span><span class="p">()</span><span class="err">’</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>note the &#8220;`python myscript
@myDecorator # The @myDecorator denotes the the application of a decorator</p>

<figure class='code'><figcaption><span>decorator example.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;</span><span class="n">b</span><span class="o">&gt;</span><span class="n">Function</span> <span class="n">decorators</span><span class="o">&lt;/</span><span class="n">b</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">So</span> <span class="n">by</span> <span class="n">affixing</span> <span class="n">a</span> <span class="nd">@decoratorname</span> <span class="n">on</span> <span class="n">a</span> <span class="n">line</span> <span class="n">directly</span> <span class="n">above</span> <span class="n">a</span> <span class="n">function</span> <span class="p">(</span><span class="ow">or</span> <span class="nb">object</span><span class="p">),</span> <span class="n">denotes</span> <span class="n">the</span> <span class="n">application</span> <span class="n">of</span> <span class="n">the</span> <span class="n">results</span> <span class="n">of</span> <span class="n">a</span> <span class="n">decorator</span> <span class="n">function</span><span class="o">.</span> <span class="n">In</span> <span class="n">the</span> <span class="n">previous</span> <span class="n">example</span><span class="p">,</span> <span class="n">when</span> <span class="n">the</span> <span class="n">python</span> <span class="n">parser</span> <span class="n">passes</span> <span class="n">over</span> <span class="n">the</span> <span class="err">“</span><span class="n">myFunction</span><span class="p">()</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">myFunction</span><span class="p">()</span><span class="err">”</span> <span class="ow">is</span> <span class="n">compiled</span> <span class="ow">and</span> <span class="ow">is</span><span class="p">,</span> <span class="ow">in</span> <span class="n">turn</span><span class="p">,</span> <span class="n">passed</span> <span class="n">to</span> <span class="n">the</span> <span class="err">“</span><span class="n">myDecorator</span> <span class="n">code</span> <span class="n">block</span><span class="o">.</span>  <span class="n">This</span> <span class="n">code</span> <span class="n">block</span> <span class="n">creates</span> <span class="n">a</span> <span class="n">function</span><span class="o">-</span><span class="n">like</span> <span class="nb">object</span> <span class="n">that</span> <span class="ow">is</span> <span class="n">ultimately</span> <span class="n">what</span> <span class="ow">is</span> <span class="n">returned</span> <span class="n">when</span> <span class="n">calling</span> <span class="n">the</span> <span class="err">“</span><span class="n">myFunction</span><span class="p">()</span><span class="err">”</span> <span class="n">function</span><span class="o">.</span>  <span class="n">Confusing</span><span class="err">?</span>  <span class="n">Maybe</span> <span class="n">this</span> <span class="n">example</span> <span class="n">will</span> <span class="n">help</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>python decorator example2.py</p>

<p>class myDecorator(object):</p>

<pre><code>def __init__(self, func_object):
    print ("Hello from inside myDecorator.__init__()")
    func_object() # Execute func_object() to prove it has been executed.
def __call__(self):
    print ("Hello from inside myDecorator.__call__()")
</code></pre>

<p>@myDecorator
def myFunction():</p>

<pre><code>print ("Hello from inside myFunction()")
</code></pre>

<p>print (&ldquo;Finished decorating myFunction()&rdquo;)
myFunction()</p>

<figure class='code'><figcaption><span>decorator example.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">When</span> <span class="n">you</span> <span class="n">execute</span> <span class="n">the</span> <span class="n">above</span> <span class="n">code</span><span class="p">,</span> <span class="n">your</span> <span class="n">results</span> <span class="n">will</span> <span class="n">look</span> <span class="n">something</span> <span class="n">like</span> <span class="n">this</span><span class="p">:</span>
</span></code></pre></td></tr></table></div></figure>


<p>text output</p>

<p>Hello from inside myDecorator.<strong>init</strong>()
Hello from inside myFunction()
Finished decorating myFunction()
Hello from inside myDecorator.<strong>call</strong>()</p>

<p>&#8220;`</p>

<p>Note that the initialization of myDecorator(object) is executed when myFunction() is called. Due to the fact that we call “func_object()”, which is just myFunction() passed into the decorator class.<strong>init</strong> as a function object labeled “func_object”.  Generally, you&rsquo;ll pass the function object in the constructor and later use it in the <strong>call</strong>() method.</p>

<p>When myFunction() is called after it has been decorated, we get completely different behavior; the myDecorator.<strong>call</strong>() method is called instead of the original code. This is due to the fact that decoration replaces the original function object with the result of the decoration. In our case, the myDecorator object replaces myFunction.</p>

<p>This is it for the introduction to Python decorators, however look out for part II, coming soon… ☺</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python: Recursion, Part Duex]]></title>
    <link href="http://zerosignal0.github.io/blog/2014/06/04/python-recursion/"/>
    <updated>2014-06-04T03:09:08+00:00</updated>
    <id>http://zerosignal0.github.io/blog/2014/06/04/python-recursion</id>
    <content type="html"><![CDATA[<p>I ended up on a roll tonight writing my documentation on python recursive functions and decided to continue writing the second portion of this blog entry <a href="http://zerosignal0.github.io/blog/2014/06/03/python-introduction-to-recursion/">,first post found here</a>.  In this post I plan to provide you with a slightly more complicated example of a recursive function while also showing a side-by-side comparison of recursion vs. iteration (Spoiler alert, iteration wins!).</p>

<br><br>


<p><b>Italians and integers, breeding like rabbits!</b></p>

<br><br>


<p>My example algorithm that I am introducing for advanced recursive method usage is none other than the <a href=”http://en.wikipedia.org/wiki/Fibonacci_number”>Fibonacci number</a>.</p>

<br>


<p>The Fibonacci numbers are a sequence of the following integer values:</p>

<br>


<p><b>[0,1,1,2,3,5,8,13,21,34,55,89,144 &hellip;]</b></p>

<br>


<p>The Fibonacci numbers are defined by the equation:</p>

<figure class='code'><figcaption><span>equation</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Fn = Fn-1 + Fn-2
</span><span class='line'>with F0 = 0 and F1 = 1
</span></code></pre></td></tr></table></div></figure>




<br><br>


<p>The Fibonacci sequence(numbers) are named after the mathematician Leonardo of Pisa, who is better known as Fibonacci. In his book &ldquo;Liber Abaci&rdquo; (published 1202) he introduced the sequence as an exercise dealing with (biologically unrealistic) rabbit breeding habits. His sequence of the Fibonacci numbers begins with F1 = 1, while in modern mathematics the sequence starts with F0 = 0. But this has no effect on the other members of the sequence.</p>

<br><br>


<p>OK, now that you are familiar with the introduction of Fionacci numbers lets get to the gooey, nerdy center of this example! ☺</p>

<br><br><br>


<p><b>Solving for Fibonacci sequencing in Python</b></p>

<br><br>


<p>The Fibonacci numbers are the result of an artificial rabbit population, satisfying the following conditions: <br><br></p>

<p>A newly born pair of rabbits, one male, one female, build the initial population.
The rabbits are able to successfully mate at the age of one month. This means that at the end of the second month of life, the female rabbit gives birth to 2 “hoppy”(harhar), healthy rabbits.  The new sibling pair of rabbits consist of 1 male and one female.  Did I mention that all of the rabbit spawn are immortal?!? Every rabbit from here on out will never die and just keep producing offspring. What a job, eh? Every new pair of male|female rabbits will continue to mate after the second month of life until infinity.  The Fibonacci numbers are the numbers of rabbit pairs after n months, i.e. after 10 months we will have F10 rabbits. <br><br></p>

<p>The Fibonacci equation is very easy to program, as your equation depicted within the code is almost 1:1 with the original equation:</p>

<br><br>




<figure class='code'><figcaption><span>Fibonacci recursive example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">fibonacci_recursive</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">fibonacci_recursive</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fibonacci_recursive</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<br><br>


<p>The above example depicts the Fibonacci numbers solution by using recursive methods.  Now I will provide an example of a python function that returns the same Fibonacci numbers only using iteration instead of recursion.</p>

<br><br>




<figure class='code'><figcaption><span>Finbonacci iterative example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">fibonacci_iterative</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>    <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>        <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="p">,</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">a</span>
</span></code></pre></td></tr></table></div></figure>


<br><br>


<p>If you try both of these functions in your python interpreter you will notice that fibonacci_iterative method is “Orders of magnitude” faster than the fibonacci_recursive equivalent.</p>

<br><br><br>


<p><b>Why is recursion so slow?!</b></p>

<br><br>


<p>In Java, C, and Python, recursion is fairly expensive compared to iteration (in general) because it requires the allocation of a new stack frame. In some C compilers, one can use a compiler flag to eliminate this overhead, which transforms certain types of recursion (actually, certain types of tail calls) into jumps instead of function calls.</p>

<p>In functional programming language implementations, sometimes, iteration can be very expensive and recursion can be very cheap. In many, recursion is transformed into a simple jump, but changing the loop variable (which is mutable) sometimes requires some relatively heavy operations, especially on implementations, which support multiple threads of execution. Mutation is expensive in some of these environments because of the interaction between the mutator and the garbage collector, if both might be running at the same time.</p>

<p>There are practical ways that we can help along recursive functions in order to speed them up however.  Lets move onto the race between recursion vs. iteration and then we can describe how to speed up our recursion functions in this example.</p>

<br><br><br>


<p><b>The great race</b></p>

<br><br>


<p>In the example below we are going to place both of our above Fibonacci functions into an importable python file.  Then we are going to write a new script that imports / executes both functions while performing timing calculations comparing the execution times.</p>

<br><br>




<figure class='code'><figcaption><span>import_me.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">fibonacci_iterative</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>    <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>        <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="p">,</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">a</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">fibonacci_recursive</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">fibonacci_recursive</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fibonacci_recursive</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<br><br>


<p>Now we will write a python script that will allow for us to import and execute the two functions within “import_me.py” and measure the execution times.</p>

<br><br><br>




<figure class='code'><figcaption><span>lets_race.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">timeit</span> <span class="kn">import</span> <span class="n">Timer</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">import_me</span> <span class="kn">import</span> <span class="n">fibonacci_recursive</span>
</span><span class='line'>
</span><span class='line'><span class="n">t1</span> <span class="o">=</span> <span class="n">Timer</span><span class="p">(</span><span class="s">&quot;fibonacci_recursive(10)&quot;</span><span class="p">,</span><span class="s">&quot;from import_me import fibonacci_recursive&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">41</span><span class="p">):</span>
</span><span class='line'>    <span class="c">#Import, execute and time recursive function.</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="p">(</span><span class="s">&quot;fibonacci_recursive(&quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;)&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">t1</span> <span class="o">=</span> <span class="n">Timer</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="s">&quot;from import_me import fibonacci_recursive&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">time1</span> <span class="o">=</span> <span class="n">t1</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">#Import, execute and time iterative function. </span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="p">(</span><span class="s">&quot;fibonacci_iterative(&quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;)&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">t2</span> <span class="o">=</span> <span class="n">Timer</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="s">&quot;from import_me import fibonacci_iterative&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">time2</span> <span class="o">=</span> <span class="n">t2</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;n=</span><span class="si">%2d</span><span class="s">, recursive exec time: </span><span class="si">%8.6f</span><span class="s">, iterative exec time:  </span><span class="si">%7.6f</span><span class="s">, iterative percent faster: </span><span class="si">%10.2f</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">time1</span><span class="p">,</span> <span class="n">time2</span><span class="p">,</span> <span class="n">time1</span><span class="o">/</span><span class="n">time2</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<br><br>




<figure class='code'><figcaption><span>output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>n= 1, recursive exec time: 0.000005, iterative exec time:  0.000007, iterative percent faster:       0.72
</span><span class='line'>n= 2, recursive exec time: 0.000007, iterative exec time:  0.000007, iterative percent faster:       1.00
</span><span class='line'>n= 3, recursive exec time: 0.000008, iterative exec time:  0.000007, iterative percent faster:       1.14
</span><span class='line'>n= 4, recursive exec time: 0.000011, iterative exec time:  0.000008, iterative percent faster:       1.35
</span><span class='line'>n= 5, recursive exec time: 0.000017, iterative exec time:  0.000008, iterative percent faster:       2.09
</span><span class='line'>n= 6, recursive exec time: 0.000026, iterative exec time:  0.000008, iterative percent faster:       3.21
</span><span class='line'>n= 7, recursive exec time: 0.006997, iterative exec time:  0.000016, iterative percent faster:     438.01
</span><span class='line'>n= 8, recursive exec time: 0.000060, iterative exec time:  0.000009, iterative percent faster:       6.63
</span><span class='line'>n= 9, recursive exec time: 0.000093, iterative exec time:  0.000010, iterative percent faster:       9.29
</span><span class='line'>n=10, recursive exec time: 0.000148, iterative exec time:  0.000010, iterative percent faster:      14.79
</span><span class='line'>n=11, recursive exec time: 0.000236, iterative exec time:  0.000010, iterative percent faster:      23.57
</span><span class='line'>n=12, recursive exec time: 0.000381, iterative exec time:  0.000010, iterative percent faster:      38.05
</span><span class='line'>n=13, recursive exec time: 0.007792, iterative exec time:  0.000012, iterative percent faster:     653.64
</span><span class='line'>n=14, recursive exec time: 0.001105, iterative exec time:  0.000012, iterative percent faster:      92.70
</span><span class='line'>n=15, recursive exec time: 0.008806, iterative exec time:  0.000012, iterative percent faster:     724.22
</span><span class='line'>n=16, recursive exec time: 0.010133, iterative exec time:  0.000017, iterative percent faster:     598.61
</span><span class='line'>n=17, recursive exec time: 0.019284, iterative exec time:  0.000018, iterative percent faster:    1064.25
</span><span class='line'>n=18, recursive exec time: 0.022575, iterative exec time:  0.000017, iterative percent faster:    1333.61
</span><span class='line'>n=19, recursive exec time: 0.056988, iterative exec time:  0.000020, iterative percent faster:    2845.54
</span><span class='line'>n=20, recursive exec time: 0.079930, iterative exec time:  0.000019, iterative percent faster:    4243.67
</span><span class='line'>n=21, recursive exec time: 0.114535, iterative exec time:  0.000018, iterative percent faster:    6405.25
</span><span class='line'>n=22, recursive exec time: 0.157802, iterative exec time:  0.000018, iterative percent faster:    8708.80
</span><span class='line'>n=23, recursive exec time: 0.261647, iterative exec time:  0.000018, iterative percent faster:   14439.83
</span><span class='line'>n=24, recursive exec time: 0.425641, iterative exec time:  0.000018, iterative percent faster:   23803.57
</span><span class='line'>n=25, recursive exec time: 0.685106, iterative exec time:  0.000019, iterative percent faster:   35919.29
</span><span class='line'>n=26, recursive exec time: 1.090093, iterative exec time:  0.000018, iterative percent faster:   60962.41
</span><span class='line'>n=27, recursive exec time: 1.777188, iterative exec time:  0.000019, iterative percent faster:   93175.84
</span><span class='line'>n=28, recursive exec time: 2.874248, iterative exec time:  0.000020, iterative percent faster:  143517.50
</span></code></pre></td></tr></table></div></figure>


<br><br><br>


<p>In part three of this blog series I will cover in greater detail why the recursive solution is slower than the iterative solution.  I will also cover some tips / tricks that we can do to help tune the recursive function in order to make it perform much like its iterative counterpart.</p>

<p>-g</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python: Introduction to Recursion]]></title>
    <link href="http://zerosignal0.github.io/blog/2014/06/03/python-introduction-to-recursion/"/>
    <updated>2014-06-03T23:14:06+00:00</updated>
    <id>http://zerosignal0.github.io/blog/2014/06/03/python-introduction-to-recursion</id>
    <content type="html"><![CDATA[<p>I have been asked recently to write up a description on recursion in regards to python recursive functions.  I figured this is a topic that generally confuses most engineers that I work with and is probably worthy of a quick blog post.</p>

<br><br><br>


<p><b>So first of all what is recursion?</b></p>

<p>Recursive functions are functions that call themselves in their definition. Because a recursive function calls on itself to perform its task, it can make jobs that contain identical work on multiple data objects easier to conceptualize, plan and write.  Recursion can also be quite taxing on the server in which it is being ran and also has limitations which can sometimes cause issues in the future.  For example recursive functions, by default, Windows has a recursion limit of 1000 (as does OSX).  Linux, depending on the flavor, can range but generally is 2147483647 (2<sup>31</sup> &ndash; 1).</p>

<p><b>*note to determine the value set on your system, open your python interpreter and run the following:</b></p>

<br><br>




<figure class='code'><figcaption><span>determine recursion limit</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="n">sys</span><span class="o">.</span><span class="n">getrecursionlimit</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<br><br>


<p>Another thing to consider when writing a recursive function is that, recursion is indeed the best approach.  I have seen instances where introduction can actually cause code complication along with poor performance vs. other design patterns.</p>

<br><br>




<figure class='code'><figcaption><span>simple example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">some_func</span><span class="p">(</span><span class="n">z</span><span class="p">):</span>
</span><span class='line'>    <span class="n">some_func</span><span class="p">(</span><span class="n">z</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<br><br>


<p>Now the above example has an obvious issue in the fact that it never returns which causes a loop.  This loop will continue to iterate until it reaches the system set limitation (as described previously).  If you were to run the above code the end result would be the following snippet.</p>

<br><br>




<figure class='code'><figcaption><span>simple example output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">2</span><span class="p">,</span> <span class="ow">in</span> <span class="n">some_func</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">2</span><span class="p">,</span> <span class="ow">in</span> <span class="n">some_func</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">2</span><span class="p">,</span> <span class="ow">in</span> <span class="n">some_func</span>
</span><span class='line'><span class="ne">RuntimeError</span><span class="p">:</span> <span class="n">maximum</span> <span class="n">recursion</span> <span class="n">depth</span> <span class="n">exceeded</span>
</span></code></pre></td></tr></table></div></figure>


<br><br><br>


<p><b>Intro to base cases</b></p>

<p>To avoid the previous example of recursion running uncontrollably until reaching the limits of the system, we have conditionals which are required to properly gate recursion.  This means that functions that make use of recursion require conditions to be satisfied in order to either <b>continue to recursively call itself</b> or <b>return</b>.  The common conditionals used are if/else.</p>

<br><br><br>


<p><b>Example recursion code snippet</b></p>

<br>


<p>The most common example to describe usage of recursion is within the factoring of factorial for a given number.  In the spirit of this, I am going to provide a code example of using recursion to determine the factorial for a given number.  As a quick explanation, if your unfamiliar with factorials. A factorial is a product of multiplication: the number resulting from multiplying a whole number by every whole number between itself and 1 inclusive.  (n!, or n * n-1 * n-2 &hellip; 0).</p>

<br><br><br>




<figure class='code'><figcaption><span>factorial example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">An example of a factorial number is the following:</span>
</span><span class='line'><span class="sd">5! = 5 * 4 * 3 * 2 * 1</span>
</span><span class='line'><span class="sd">Or </span>
</span><span class='line'><span class="sd">5! = 5 * 4!</span>
</span><span class='line'><span class="sd">Etc...</span>
</span><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">factorial</span><span class="p">(</span><span class="n">number</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">number</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">           return 1, which will also unwind all of the numbers </span>
</span><span class='line'><span class="sd">           included in determining the factorial.</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">           Call this function again recursively only subtracting</span>
</span><span class='line'><span class="sd">           1 prime number from the previously provided number.</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">number</span> <span class="o">*</span> <span class="n">factorial</span><span class="p">(</span><span class="n">number</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">factorial</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<br><br><br>


<p>By copying the above code and executing in within python you will be provided with the factorial value of 5!.  The expected return number is 120.</p>

<br>


<p>A more in depth explanation of recursion can be found <a href="http://interactivepython.org/courselib/static/pythonds/Recursion/recursionsimple.html">http://interactivepython.org/courselib/static/pythonds/Recursion/recursionsimple.html</a></p>

<p> I plan on doing a part 2 for this post in the near future so if you found this interesting that look out for it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python: How to Init a Function by Calling It Using a String]]></title>
    <link href="http://zerosignal0.github.io/blog/2014/05/31/python-how-to-init-a-function-by-calling-it-using-a-string/"/>
    <updated>2014-05-31T23:22:15+00:00</updated>
    <id>http://zerosignal0.github.io/blog/2014/05/31/python-how-to-init-a-function-by-calling-it-using-a-string</id>
    <content type="html"><![CDATA[<p>This topic is an interesting one that I have faced on a few occasions.  There are a couple of different solution that I have found over the last couple of years that work depending on the situation.  So let&rsquo;s back up again and state the problem in the form of a question.</p>

<p>&ldquo;How do you call a function in python guven a string of the functions name?&rdquo;</p>

<p>Generally this behavior is not allowed due to the strict type casting of python, ie. a function must be a function type before being able to call.  So how do you approach calling a function by using a string? *note that both of these examples are assuming that the functions being called are residing within imported modules.</p>

<p>Here are a couple of examples:</p>

<p>1.)  Use the getattr() built-in function to evaluate a module object and provide a string attribute denoting the name of the function to execute.
<b>*note This method is generally frowned upon as using getattr and eval are both possibly dangerous built in functions that can lead to security issues / unexpected results.<b></p>

<p>  example:</p>

<figure class='code'><figcaption><span>simple_example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">foo</span> <span class="c"># Your module</span>
</span><span class='line'>
</span><span class='line'><span class="n">methodCall</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">foo</span><span class="p">,</span> <span class="s">&#39;bar&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="n">methodCall</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>2.) You can also write an abstract function capable of evaluating the string provided in a function object, and also evaluate if the function exists in a graceful way.
This approach is a bit more complex and makes use of a couple of different modules, along with leveraging decorator functions.</p>

<p>  example:</p>

<p>  <b>Place this code into a importable module file called registry.py</b></p>

<figure class='code'><figcaption><span>registry.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Registry</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">funcs</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">execute</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">func</span><span class="p">):</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">funcs</span><span class="p">[</span><span class="n">func</span><span class="o">.</span><span class="n">__name__</span><span class="p">]</span> <span class="o">=</span> <span class="n">func</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">func</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">dispatch</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">funcs</span><span class="p">[</span><span class="n">name</span><span class="p">](</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>      <span class="k">raise</span> <span class="n">Error</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>  <b>Now create a file that contains your functions you wish to call.  In this example call this file myfuncs.py</b></p>

<figure class='code'><figcaption><span>myfuncs.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">registry</span>
</span><span class='line'>
</span><span class='line'><span class="n">callme</span> <span class="o">=</span> <span class="n">registry</span><span class="o">.</span><span class="n">Register</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@callme.execute</span>
</span><span class='line'><span class="k">def</span> <span class="nf">myCoolFunction</span><span class="p">():</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&#39;hello world&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>  <b>Finally here is the script that will create the string in which we will attempt to execute as a function.</b></p>

<figure class='code'><figcaption><span>your_script.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">myfuncs</span>
</span><span class='line'>
</span><span class='line'><span class="n">runfunc</span> <span class="o">=</span> <span class="n">myfuncs</span><span class="o">.</span><span class="n">callme</span>
</span><span class='line'>
</span><span class='line'><span class="n">runfunc</span><span class="o">.</span><span class="n">dispatch</span><span class="p">(</span><span class="s">&#39;myCoolFunction&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see example 2 is quite a bit more involved however can scale to supporting MANY different function template files.  This means that you can further abstract your code into a template language to dynamically import with.</p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Messaging Queue Showdown: Amazon SQS vs Celery(RabbitMQ)]]></title>
    <link href="http://zerosignal0.github.io/blog/2014/05/25/messaging-queue-showdown-amazon-sqs-vs-celery-rabbitmq/"/>
    <updated>2014-05-25T19:58:12+00:00</updated>
    <id>http://zerosignal0.github.io/blog/2014/05/25/messaging-queue-showdown-amazon-sqs-vs-celery-rabbitmq</id>
    <content type="html"><![CDATA[<p>As I am a previous engineer at Amazon AWS I have plenty of experience with AWS services and have exclusively leveraged SQS in many projects.  I have always had a mostly positive experience with Amazon AWS SQS <a href="https://aws.amazon.com/sqs/">https://aws.amazon.com/sqs/</a> however I have been curious for quite some time what the benefit of rabbitMQ <a href="http://www.rabbitmq.com/">http://www.rabbitmq.com/</a> could be vs. SQS. Message queuing is not a new concept and has existed for years within computer science/engineering see: <a href="http://en.wikipedia.org/wiki/Message_queue">http://en.wikipedia.org/wiki/Message_queue</a> if you are unfamiliar with the concept.</p>

<p>*I would like to firstly point out that my experiences with both services have been with Python, however I did create a test instance and performed the same tests with Java yielding the same results.</p>

<p>So I have to start out by saying that Amazons offering for queuing services is fantastic, relatively cheap and easy.  The community has also built some fantastic programmatic libraries to interact with the web services.  So now you may ask, why look at other services?  Well there can be some possible drawbacks of SQS as well that can cause you some problems depending on the situation.</p>

<p>One drawback of SQS implementation is the need for polling of a message queue to determine if new messages have appeared.  This is a bit of an issue being as you must now model your application to perform a polling cycle in order to determine if new messages are available, and if so build the logic around consuming the message and popping it out of the queue.  You must also be mindful of queue settings that control such things as TTL, maximum message length and which endpoints (if multiple are used) the message is destined for.</p>

<p>Beyond the small issue of having to be responsible for your own polling cycle, you are also billed based upon the number of requests to a queue.  I believe the breakdown on billing is something along the lines of 1 million requests == $100.00.  While this isn’t a ton of money it can still get quite costly if your distributed app has 100s of queue and must all be polled.  Especially if your messages come in bursts, in which case you have a lot of empty queue polling which penalizes you. There are different approaches you can take with SQS to apply back-off algorithms to queuing logic, but the penalty is delay in all other inter-dependent services cascades.</p>

<p>So now enter RabbitMQ.</p>

<p>RabbitMQ is a message queue system based on Erlang and conforming to AMQP (a standard and heavily used message queue protocol).  There are obvious overhead in the fact that you must host your own instances of RabbitMQ along with the infrastructure.  Also obvious reliability in multi-AZ redundancy will need to be considered unless you continue to host your instance within EC2 and configure appropriately.</p>

<p>So now lets talk about the speed of RabbitMQ, I have one word to describe it.  FAST! My testing was performed within Amazon EC2 / AWS within the same region|AZ to be fair.  My test was simple, build a queue, spray 5,000 message to the queue as fast as possible, de-queue and discard message.   There are many different configurations  that RabbitMQ can support such as one-to-one, one-to-many, many-to-many, RPC.  In my example I simply used the default which is one-to-one.</p>

<p>So now the “quarter mile” times between the two.</p>

<p>Amazon AWS SQS: <br>
Region: <b>IAD</b><br>
Service: <b>SQS</b><br>
Total time: <b>5:42 minutes:seconds</b><br></p>

<p>RabbitMQ EC2:<br>
Region: <b>IAD</b><br>
Service: <b>EC2</b><br>
Total time: <b>0:06 minutes:seconds</b><br></p>

<p>What does this prove!?!</p>

<p>Nothing really besides shoving a lot of messages down the pipe and pulling them out on the other side IS indeed faster using RabbitMQ.  This does not prove however that the actual service is “better” than SQS by any stretch of the imagination.  Both services provide pro/con, and SQS has a rich history of reliable service that affords a great mixture of safe queuing along with a rock solid infrastructure.</p>

<p>On the other hand depending on the configuration of RabbitMQ you can gain a lot of these safeties with seemingly smaller hit in performance in terms of delivery times.  I hope to revisit this topic once I have more time to spend, hopefully this helps educate anyone that is posed with approaching these services in the future though.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis to the Rescue]]></title>
    <link href="http://zerosignal0.github.io/blog/2014/05/23/redis-to-the-rescue-slash/"/>
    <updated>2014-05-23T06:36:28+00:00</updated>
    <id>http://zerosignal0.github.io/blog/2014/05/23/redis-to-the-rescue-slash</id>
    <content type="html"><![CDATA[<p>In working on a project I was having some issues with storing data with a MySQL server that required many read/writes.  Normally this wouldn&rsquo;t be a huge deal except for the systems are states away from eachother with less than reliable throughput and no option for scalable cloud solutions.  I did however have another host in close proximity that was capable of hosting a REDIS based server for me to read/write to.  I have worked with REDIS once before but this experience has been AWESOME so far!  Key/Data stores are one thing but the speed of this technology, when implemented correctly, blows my mind every time.  If you haven&rsquo;t had the chance to work with REDIS you should give it a try, here is a AWESOME interactive demo <a href="http://try.redis.io/">http://try.redis.io/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World From My Shiny New Octopress Site]]></title>
    <link href="http://zerosignal0.github.io/blog/2014/05/22/hello-world-from-my-shiny-new-octopress-site/"/>
    <updated>2014-05-22T16:47:28+00:00</updated>
    <id>http://zerosignal0.github.io/blog/2014/05/22/hello-world-from-my-shiny-new-octopress-site</id>
    <content type="html"><![CDATA[<p>Ahoy there, world!</p>
]]></content>
  </entry>
  
</feed>
